// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  USER
  ADMIN
  VALIDATOR
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id              String           @id @default(uuid())
  name            String           @unique
  password        String
  isAdmin         Boolean          @default(false)
  role            Role             @default(USER)
  surats          Surat[]          @relation("author")
  accounts        Account[]
  validationStage ValidationStage? @relation("validationStage")
  suratNotes      SuratNote[]      @relation("suratNoteAuthor")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model ValidationStage {
  id          String  @id @default(uuid())
  title       Int     @unique
  validator   User?   @relation("validationStage", fields: [validatorId], references: [id], onDelete: Cascade)
  validatorId String? @unique
  surat       Surat[]
}

model Surat {
  id                String           @id @default(uuid())
  subject           String
  author            User             @relation("author", fields: [authorId], references: [id], onDelete: Cascade)
  authorId          String
  receiver          String
  file              String
  status            Boolean          @default(false)
  noted             String?
  validationStage   ValidationStage? @relation(fields: [validationStageId], references: [id])
  validationStageId String?
  validationStatus  Boolean          @default(false)
  notes             SuratNote[]      @relation("suratNote")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SuratNote {
  id       Int    @id @default(autoincrement())
  message  String @db.Text
  surat    Surat  @relation("suratNote", fields: [suratId], references: [id], onDelete: Cascade)
  suratId  String
  author   User   @relation("suratNoteAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
}
